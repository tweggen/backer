@page "/backer/jobs"
@using Hannibal.Client
@using Hannibal.Models
@rendermode InteractiveServer

@inject IHannibalServiceClient HannibalServiceClient

<h3>Jobs</h3>

@if (listJobs == null)
{
    <p><em>Loading jobs...</em></p>
}
else if (!listJobs.Any())
{
    <p>No jobs found.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>State</th>
            <th>SourceEndpoint</th>
            <th>DestinationEndpoint</th>
            <th>StartFrom</th>
            <th>Endby</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var job in listJobs)
        {
            <tr>
                <td>@job.Id</td>
                <td>@job.State</td>
                <td>@job.SourceEndpoint</td>
                <td>@job.DestinationEndpoint</td>
                <td>@job.StartFrom</td>
                <td>@job.EndBy</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Job> listJobs;

    protected override async Task OnInitializedAsync()
    {
        listJobs = new List<Job>(
            await HannibalServiceClient.GetJobsAsync(
                new ResultPage() { Offset = 0, Length = 20},
                new JobFilter() { MaxState = Job.JobState.DoneSuccess, MinState = Job.JobState.Preparing},
                CancellationToken.None
            ));
    }

    public void Dispose()
    {
        // Dispose logic if needed
    }
}
