@page "/backer/rules"
@using Hannibal.Client
@using Hannibal.Client
@using Hannibal.Models
@inject IHannibalServiceClient HannibalServiceClient
@inject NavigationManager NavigationManager
@implements IDisposable
@rendermode InteractiveServer


<h3>Rules</h3>

@if (_listRules == null)
{
    <p><em>Loading rules...</em></p>
}
else if (!_listRules.Any())
{
    <p>No rules found.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>&nbsp;</th>
            <th>Name</th>
            <th>Source</th>
            <th>Operation</th>
            <th>Destination</th>
            <th>Max dest. age</th>
            <th>Daily trigger time</th>
            <th>Comment</th>
            <th>&nbsp;</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var ru in _listRules)
        {
            @if (_editRuleId == ru.Id && _listEndpoints != null)
            {
                    <tr>
                        <td>&nbsp;</td>
                        <td><InputText id="name" class="form-control" @bind-Value="_editRule.Name" /></td>
                        <td>
                            <InputSelect id="source" 
                                         placeholder="Source Endpoint"
                                         class="form-control"
                                         @bind-Value="_editSourceEndpointId"
                                         @bind-Value:after="_onEditSourceEndpointChanged">
                                @foreach (var ep in _listEndpoints)
                                {
                                    <option value="@ep.Id">@ep.Name</option>
                                }
                            </InputSelect>
                        </td>
                        <td>
                            <InputSelect id="operation"
                                         placeholder="Operation"
                                         class="form-control"
                                         @bind-Value="_editRule.Operation">
                                @foreach (var op in Enum.GetValues(typeof(Rule.RuleOperation)))
                                {
                                    <option value="@op">@op</option>
                                }
                            </InputSelect>
                        </td>
                        <td>
                            <InputSelect id="destination"
                                         placeholder="Destination Endpoint"
                                         class="form-control"
                                         @bind-Value="_editDestinationEndpointId"
                                         @bind-Value:after="_onEditDestinationEndpointChanged">
                                @foreach (var ep in _listEndpoints)
                                {
                                    <option value="@ep.Id">@ep.Name</option>
                                }
                            </InputSelect>
                        </td>
                        <td>
                            
                            <InputNumber id="maxDestAge"
                                         @bind-Value="_editMaxDestAge"
                                         class="form-control"/>
                        </td>
                        <td>
                            <InputNumber id="dailyTriggerTime"
                                         @bind-Value="_editDailyTriggerTime"
                                         class="form-control"/>
                        </td>
                        <td><InputText id="comment" @bind-Value="_editRule.Comment" class="form-control"/></td>
                        <td>
                            <button @onclick="_onEditRuleSubmit" id="submiteditrule" class="close">‚úî</button>
                            <button @onclick="_onEditRuleCancel" class="close" aria-label="delete">‚ùåÔ∏è</button>
                        </td>
                    </tr>
                
            } else
            {
                <tr>
                    <td><button id="starteditrule" @onclick="() => _onEdit(ru)" aria-label="edit">‚úè</button></td>
                    <td>@ru.Name</td>
                    <td>@ru.SourceEndpoint.Name</td>
                    <td>@ru.Operation.ToString()</td>
                    <td>@ru.DestinationEndpoint.Name</td>
                    <td>@ru.MaxDestinationAge.TotalSeconds</td>
                    <td>@ru.DailyTriggerTime.TotalSeconds</td>
                    <td>@ru.Comment</td>
                    <td>
                        <button @onclick="() => _onDelete(ru)" class="close" aria-label="delete">üóëÔ∏è</button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
}

@if (_listEndpoints == null)
{
    <p><em>Loading endpoints</em></p>
} else if (!_listEndpoints.Any())
{
    <p>No endpoints defined. Please define endpoints before using them in rules.</p>
}
else
{
    <h2>Create new rule</h2>
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="_newRule" OnValidSubmit="_onNewRuleSubmit" FormName="create" Enhance>
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger"/>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name"
                               placeholder="Name"
                               class="form-control"
                               @bind-Value="_newRule.Name" />
                    <ValidationMessage For="() => _newRule.Name" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="sourceEndpoint" class="form-label">Source endpoint:</label>
                    <InputSelect id="sourceEndpoint"
                                 placeholder="Source"
                                 class="form-control"
                                 @bind-Value="_newSourceEndpointId" 
                                 @bind-Value:after="_onNewSourceEndpointChanged" 
                                 >
                        @foreach (var ep in _listEndpoints)
                        {
                            <option value="@ep.Id">@ep.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="operation" class="form-label">Op:</label>
                    <InputSelect id="operation"
                                 placeholder="Operation"
                                 class="form-control"
                                 @bind-Value="_newRule.Operation">
                        @foreach (var op in Enum.GetValues(typeof(Rule.RuleOperation)))
                        {
                            <option value="@op">@op</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="destinationEndpoint" class="form-label">Destination endpoint:</label>
                    <InputSelect id="destinationEndpoint"
                                 placeholder="Dest"
                                 class="form-control"
                                 @bind-Value="_newDestinationEndpointId"
                                 @bind-Value:after="_onNewDestinationEndpointChanged"
                    >
                        @foreach (var ep in _listEndpoints)
                        {
                            <option value="@ep.Id">@ep.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="maxDestAge" class="form-label">max dest age:</label>
                    <InputNumber id="maxDestAge"
                               placeholder="max dest age (sec)"
                               class="form-control"
                               @bind-Value="_newMaxDestAge"/>
                    <ValidationMessage For="() => _newRule.MaxDestinationAge" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="dailyTriggerTime" class="form-label">daily trigger time:</label>
                    <InputNumber id="dailyTriggerTime"
                                 placeholder="daily trigger time (sec)"
                                 class="form-control"
                                 @bind-Value="_newDailyTriggerTime"/>
                    <ValidationMessage For="() => _newRule.DailyTriggerTime" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="comment" class="form-label">Comment:</label>
                    <InputText id="comment"
                               placeholder="Comment"
                               class="form-control"
                               @bind-Value="_newRule.Comment" />
                    <ValidationMessage For="() => _newRule.Comment" class="text-danger"/>
                </div>
                <button type="submit" class="btn btn-primary">Create</button>
            </EditForm>
        </div>
    </div>
}


@code {
    private List<Hannibal.Models.Rule>? _listRules = null;
    private List<Hannibal.Models.Endpoint>? _listEndpoints = null;
    private Hannibal.Models.User? _user = null;

    [SupplyParameterFromForm] private Hannibal.Models.Rule _editRule { get; set; } = new() { Id = -1 };
    [SupplyParameterFromForm] private Hannibal.Models.Rule? _newRule { get; set; } = null;

    [SupplyParameterFromForm] private double _editMaxDestAge { get; set; }
    [SupplyParameterFromForm] private double _editDailyTriggerTime { get; set; }
    private int _editSourceEndpointId { get; set; } = -1;
    private Hannibal.Models.Endpoint? _editSourceEndpoint = null;
    private int _editDestinationEndpointId { get; set; } = -1;
    private Hannibal.Models.Endpoint? _editDestinationEndpoint = null;
    private int _editRuleId { get; set; } = -1;

    [SupplyParameterFromForm] private float _newMaxDestAge { get; set; } = 36 * 3600;
    [SupplyParameterFromForm] private double _newDailyTriggerTime { get; set; } = 2 * 3600;
    private int _newSourceEndpointId { get; set; } = -1;
    private Hannibal.Models.Endpoint? _newSourceEndpoint = null;
    private int _newDestinationEndpointId { get; set; } = -1;
    private Hannibal.Models.Endpoint? _newDestinationEndpoint = null;

    public void Dispose()
    {
        // Dispose logic if needed
    }

    
    private void _onEditSourceEndpointChanged()
    {
        if (null == _listEndpoints || null == _editRule)
        {
            return;
        }
        _editSourceEndpoint = _listEndpoints.First(storage => (storage.Id == (int)_editSourceEndpointId));
        _editSourceEndpointId = _editSourceEndpoint.Id;
        _editRule.SourceEndpoint = _editSourceEndpoint;
        _editRule.SourceEndpointId = _editSourceEndpointId;
    }


    private void _onEditDestinationEndpointChanged()
    {
        if (null == _listEndpoints || null == _editRule)
        {
            return;
        }
        _editDestinationEndpoint = _listEndpoints.First(storage => (storage.Id == (int)_editDestinationEndpointId));
        _editDestinationEndpointId = _editDestinationEndpoint.Id;
        _editRule.DestinationEndpoint = _editDestinationEndpoint;
        _editRule.DestinationEndpointId = _editDestinationEndpointId;
    }


    private async Task _reloadRulePage(CancellationToken cancellationToken)
    {
        _listRules = new List<Hannibal.Models.Rule>(
            await HannibalServiceClient.GetRulesAsync(new ResultPage()
                {
                    Length = 20, Offset = 0
                },
                new RuleFilter {},
                CancellationToken.None)
        );
    }
    

    private async Task _onEditRuleCancel()
    {
        _editRuleId = -1;
        _editRule = new() { Id = -1 };
        await InvokeAsync(StateHasChanged);      
    }


    private async Task _onEditRuleSubmit()
    {
        if (_editRule != null)
        {
            _editRule.MaxDestinationAge = TimeSpan.FromSeconds(_editMaxDestAge);
            _editRule.DailyTriggerTime = TimeSpan.FromSeconds(_editDailyTriggerTime);
            await HannibalServiceClient.UpdateRuleAsync(_editRule.Id, _editRule, CancellationToken.None);
        }

        _editRuleId = -1;
        _editRule = new() { Id = -1 };
        await InvokeAsync(StateHasChanged);
    }

    
    private async Task _onEdit(Hannibal.Models.Rule? ru)
    {
        if (ru != null || _listEndpoints != null)
        {
            _editRuleId = ru.Id;
            _editRule = ru;
            _editSourceEndpoint = ru.SourceEndpoint;
            _editSourceEndpointId = ru.SourceEndpointId;
            _editDestinationEndpoint = ru.DestinationEndpoint;
            _editDestinationEndpointId = ru.DestinationEndpointId;
            _editMaxDestAge = ru.MaxDestinationAge.TotalSeconds;
            _editDailyTriggerTime = ru.DailyTriggerTime.TotalSeconds;
        }
        else
        {
            _editRuleId = -1;
            _editRule = new() { Id = -1 };
        }

        await InvokeAsync(StateHasChanged);      
    }


    private void _onNewSourceEndpointChanged()
    {
        if (null == _listEndpoints || null == _newRule)
        {
            return;
        }
        _newSourceEndpoint = _listEndpoints.First(storage => (storage.Id == (int)_newSourceEndpointId));
        _newSourceEndpointId = _newSourceEndpoint.Id;
        _newRule.SourceEndpoint = _newSourceEndpoint;
        _newRule.SourceEndpointId = _newSourceEndpointId;
    }


    private void _onNewDestinationEndpointChanged()
    {
        if (null == _listEndpoints || null == _newRule)
        {
            return;
        }
        _newDestinationEndpoint = _listEndpoints.First(storage => (storage.Id == (int)_newDestinationEndpointId));
        _newDestinationEndpointId = _newDestinationEndpoint.Id;
        _newRule.DestinationEndpoint = _newDestinationEndpoint;
        _newRule.DestinationEndpointId = _newDestinationEndpointId;
    }
    

    private async Task _onNewRuleSubmit()
    {
        // TXWTODO: Where to actually validate before submit?

        if (_newRule.SourceEndpoint == null
            || _newRule.DestinationEndpoint == null
            // || string.IsNullOrWhiteSpace(_newRule.Name)
            || _newRule.SourceEndpoint == _newRule.DestinationEndpoint)
        {
            return;
        }

        _newRule.DailyTriggerTime = TimeSpan.FromSeconds(_newDailyTriggerTime);
        _newRule.MaxDestinationAge = TimeSpan.FromSeconds(_newMaxDestAge);
        
        await HannibalServiceClient.CreateRuleAsync(_newRule, CancellationToken.None);
        await _reloadRulePage(CancellationToken.None);
        await InvokeAsync(StateHasChanged);      
    }
    
    
    private async Task _onDelete(Hannibal.Models.Rule ru)
    {
        await HannibalServiceClient.DeleteRuleAsync(ru.Id, CancellationToken.None);
        await _reloadRulePage(CancellationToken.None);
        await InvokeAsync(StateHasChanged);      
    }

    
    protected override async Task OnInitializedAsync()
    {
        _user = await HannibalServiceClient.GetUserAsync(1, CancellationToken.None);

        _listEndpoints = new List<Hannibal.Models.Endpoint>(
            await HannibalServiceClient.GetEndpointsAsync(CancellationToken.None)
        );

        _newRule = new() { User = _user, UserId = _user.Id };
        _newSourceEndpoint = _listEndpoints.FirstOrDefault(ep => true);
        _newSourceEndpointId = (_newSourceEndpoint!=null)?_newSourceEndpoint.Id:-1;
        _newDestinationEndpoint = _listEndpoints.FirstOrDefault(ep => true);
        _newDestinationEndpointId = (_newDestinationEndpoint!=null)?_newDestinationEndpoint.Id:-1;
        _newRule.SourceEndpoint = _newSourceEndpoint;
        _newRule.SourceEndpointId = _newSourceEndpointId;
        _newRule.DestinationEndpoint = _newDestinationEndpoint;
        _newRule.DestinationEndpointId = _newDestinationEndpointId; 

        await _reloadRulePage(CancellationToken.None);
    }


}