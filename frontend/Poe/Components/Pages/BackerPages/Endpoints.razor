@page "/backer/endpoints"
@using Higgins.Client
@inject IHigginsServiceClient HigginsServiceClient
@inject NavigationManager NavigationManager
@implements IDisposable
@rendermode InteractiveServer


<h3>Endpoints</h3>

@if (_listEndpoints == null)
{
    <p><em>Loading endpoints...</em></p>
}
else if (!_listEndpoints.Any())
{
    <p>No endpoints found.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Storage</th>
            <th>Path</th>
            <th>Comment</th>
            <th>&nbsp;</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var ep in _listEndpoints)
        {
            <tr>
                <td>@ep.Name</td>
                <td>@ep.Storage.Technology</td>
                <td>@ep.Path</td>
                <td>@ep.Comment</td>
                <td>
                    <button @onclick="() => _onDelete(ep)" class="close" aria-label="delete">üóëÔ∏è</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@if (_listStorages == null)
{
    <p><em>Loading storages</em></p>
} else if (!_listStorages.Any())
{
    <p>No storages defined. Please define storages before defining endpoints inside them.</p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="_endpoint" OnValidSubmit="AddEndpoint" FormName="create" Enhance>
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger"/>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" class="form-control" @bind-Value="_endpoint.Name" />
                    <ValidationMessage For="() => _endpoint.Name" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="storage" class="form-label">Storage:</label>
                    <InputSelect id="storage"
                                 placeholder="Storage"
                                 class="form-control"
                                 @bind-Value="_selectedStorageId" 
                                 @bind-Value:after="_handleStorageChanged" 
                                 >
                        @foreach (var storage in _listStorages)
                        {
                            <option value="@storage.Id">@storage.Technology</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="path" class="form-label">Path:</label>
                    <InputText id="path" @bind-Value="_endpoint.Path" class="form-control"/>
                    <ValidationMessage For="() => _endpoint.Path" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="comment" class="form-label">Comment:</label>
                    <InputText id="comment" @bind-Value="_endpoint.Comment" class="form-control"/>
                    <ValidationMessage For="() => _endpoint.Comment" class="text-danger"/>
                </div>
                <button type="submit" class="btn btn-primary">Create</button>
            </EditForm>
        </div>
    </div>
}


@code {
    private List<Higgins.Models.Endpoint>? _listEndpoints = null;
    private List<Higgins.Models.Storage>? _listStorages = null;
    private Higgins.Models.User? _user = null;

    [SupplyParameterFromForm] private Higgins.Models.Endpoint? _endpoint { get; set; } = null;

    private int _selectedStorageId { get; set; } = -1;
    private Higgins.Models.Storage? _selectedStorage = null;


    public void Dispose()
    {
        // Dispose logic if needed
    }

    
    private void _handleStorageChanged()
    {
        if (null == _listStorages || null == _endpoint)
        {
            return;
        }
        _selectedStorage = _listStorages.First(storage => (storage.Id == (int)_selectedStorageId));

        _endpoint.StorageId = _selectedStorageId;
        _endpoint.Storage = _selectedStorage;
    }


    private async Task _onDelete(Higgins.Models.Endpoint ep)
    {
        await HigginsServiceClient.DeleteEndpointAsync(ep.Id);
        _listEndpoints = new List<Higgins.Models.Endpoint>(
            await HigginsServiceClient.GetEndpointsAsync()
        );
        await InvokeAsync(StateHasChanged);      
    }
    
    
    protected override async Task OnInitializedAsync()
    {
        _user = await HigginsServiceClient.GetUserAsync(1);
        _endpoint = new() { User = _user, UserId = _user.Id };
        
        _listEndpoints = new List<Higgins.Models.Endpoint>(
            await HigginsServiceClient.GetEndpointsAsync()
        );
        _listStorages = new List<Higgins.Models.Storage>(
            await HigginsServiceClient.GetStoragesAsync()
        );
    }
    
    
    private async Task AddEndpoint()
    {
        // TXWTODO: Where to actually validate before submiit?

        if (null == _endpoint.Storage || string.IsNullOrWhiteSpace(_endpoint.Name))
        {
            return;
        }
        
        await HigginsServiceClient.CreateEndpointAsync(_endpoint);
        _listEndpoints = new List<Higgins.Models.Endpoint>(
            await HigginsServiceClient.GetEndpointsAsync()
        );
        await InvokeAsync(StateHasChanged);      
    }
}