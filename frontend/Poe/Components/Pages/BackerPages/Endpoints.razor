@page "/backer/endpoints"
@using Hannibal.Client
@using Microsoft.AspNetCore.Identity
@inject IHannibalServiceClient HigginsServiceClient
@inject NavigationManager Navigation
@inject Tools.AppBasePath BasePath
@implements IDisposable
@rendermode InteractiveServer


<h3>Endpoints</h3>

@if (_listEndpoints == null)
{
    <p><em>Loading endpoints...</em></p>
}
else if (!_listEndpoints.Any())
{
    <p>No endpoints found.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>&nbsp;</th>
            <th>Name</th>
            <th>Storage</th>
            <th>Path</th>
            <th>Comment</th>
            <th>&nbsp;</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var ep in _listEndpoints)
        {
            @if (_editingEndpointId == ep.Id)
            {
                    <tr>
                        <td>&nbsp;</td>
                        <td><InputText id="name" class="form-control" @bind-Value="_editingEndpoint.Name" /></td>
                        <td>
                            <InputSelect id="storage"
                                         placeholder="Storage"
                                         class="form-control"
                                         @bind-Value="_editingEndpointStorageId"
                                         @bind-Value:after="_handleEditStorageChanged">
                                @foreach (var st in _listStorages)
                                {
                                    <option value="@st.Id">@st.Technology</option>
                                }
                            </InputSelect>
                        </td>
                        <td><InputText id="path" @bind-Value="_editingEndpoint.Path" class="form-control"/></td>
                        <td><InputText id="comment" @bind-Value="_editingEndpoint.Comment" class="form-control"/></td>
                        <td>
                            <button @onclick="_onEditEndpointSubmit" id="submiteditendpoint" class="close">‚úî</button>
                            <button @onclick="_onEditEndpointCancel" class="close" aria-label="delete">‚ùåÔ∏è</button>
                        </td>
                    </tr>
                
            } else
            {
                <tr>
                    <td><button id="starteditendpoint" @onclick="() => _onEdit(ep)" aria-label="edit">‚úè</button></td>
                    <td>@ep.Name</td>
                    <td>@ep.Storage.Technology</td>
                    <td>@ep.Path</td>
                    <td>@ep.Comment</td>
                    <td>
                        <button @onclick="() => _onDelete(ep)" class="close" aria-label="delete">üóëÔ∏è</button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
}

@if (_listStorages == null)
{
    <p><em>Loading storages</em></p>
} else if (!_listStorages.Any())
{
    <p>No storages defined. Please define storages before defining endpoints inside them.</p>
}
else
{
    <h2>Create new endpoint</h2>
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="_newEndpoint" OnValidSubmit="AddEndpoint" FormName="create" Enhance>
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger"/>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name"
                               placeholder="Name"
                               class="form-control"
                               @bind-Value="_newEndpoint.Name" />
                    <ValidationMessage For="() => _newEndpoint.Name" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="storage" class="form-label">Storage:</label>
                    <InputSelect id="storage"
                                 placeholder="Storage"
                                 class="form-control"
                                 @bind-Value="_newEndpointStorageId" 
                                 @bind-Value:after="handleNewStorageChanged" 
                                 >
                        @foreach (var storage in _listStorages)
                        {
                            <option value="@storage.Id">@storage.Technology</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="path" class="form-label">Path:</label>
                    <InputText id="path"
                               placeholder="Path"
                               class="form-control"
                               @bind-Value="_newEndpoint.Path"/>
                    <ValidationMessage For="() => _newEndpoint.Path" class="text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="comment" class="form-label">Comment:</label>
                    <InputText id="comment"
                               placeholder="Comment"
                               class="form-control"
                               @bind-Value="_newEndpoint.Comment" />
                    <ValidationMessage For="() => _newEndpoint.Comment" class="text-danger"/>
                </div>
                <button type="submit" class="btn btn-primary">Create</button>
            </EditForm>
        </div>
    </div>
}


@code {
    private List<Hannibal.Models.Endpoint>? _listEndpoints = null;
    private List<Hannibal.Models.Storage>? _listStorages = null;
    private IdentityUser? _user = null;

    private int _editingEndpointId { get; set; } = -1;
    private int _editingEndpointStorageId { get; set; } = -1;

    [SupplyParameterFromForm] private Hannibal.Models.Endpoint? _editingEndpoint { get; set; } = new() { Id = -1 };

    private int _newEndpointStorageId { get; set; } = -1;
    [SupplyParameterFromForm] private Hannibal.Models.Endpoint? _newEndpoint { get; set; } = null;

    private Hannibal.Models.Storage? _selectedStorage = null;
    private bool _isInitialized;


    public void Dispose()
    {
        // Dispose logic if needed
    }

    
    private void handleNewStorageChanged()
    {
        if (null == _listStorages || null == _newEndpoint)
        {
            return;
        }
        _selectedStorage = _listStorages.First(storage => (storage.Id == (int)_newEndpointStorageId));

        _newEndpoint.StorageId = _newEndpointStorageId;
        _newEndpoint.Storage = _selectedStorage;
    }



    private void _handleEditStorageChanged()
    {
        if (null == _listStorages || null == _editingEndpoint)
        {
            return;
        }
        _editingEndpoint.Storage = _listStorages.First(storage => (storage.Id == _editingEndpointStorageId));
        _editingEndpoint.StorageId = _editingEndpoint.Storage.Id;
    }


    private async Task _onEdit(Hannibal.Models.Endpoint? ep)
    {
        if (ep != null)
        {
            _editingEndpointId = ep.Id;
            _editingEndpoint = ep;
            _editingEndpointStorageId = ep.StorageId;
        }
        else
        {
            _editingEndpointId = -1;
            _editingEndpoint = new() { Id = -1 };
            _editingEndpointStorageId = -1;
        }
        
        await InvokeAsync(StateHasChanged);      
    }


    private async Task _onDelete(Hannibal.Models.Endpoint ep)
    {
        await HigginsServiceClient.DeleteEndpointAsync(ep.Id, CancellationToken.None);
        _listEndpoints = new List<Hannibal.Models.Endpoint>(
            await HigginsServiceClient.GetEndpointsAsync(CancellationToken.None)
        );
        await InvokeAsync(StateHasChanged);      
    }
    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            _user = await HigginsServiceClient.GetUserAsync(1, CancellationToken.None);
            if (null == _user)
            {
                Navigation.NavigateTo($"{BasePath.Value}/login");
            }

            _newEndpoint = new() { UserId = _user.Id, IsActive = true };

            _listEndpoints = new List<Hannibal.Models.Endpoint>(
                await HigginsServiceClient.GetEndpointsAsync(CancellationToken.None)
            );
            _listStorages = new List<Hannibal.Models.Storage>(
                await HigginsServiceClient.GetStoragesAsync(CancellationToken.None)
            );
            _isInitialized = true;
        }
    }


    private async Task _onEditEndpointCancel()
    {
        _editingEndpointId = -1;
        _editingEndpoint = new() { Id = -1};
        await InvokeAsync(StateHasChanged);      
    }


    private async Task _onEditEndpointSubmit()
    {
        if (_editingEndpoint != null)
        {
            await HigginsServiceClient.UpdateEndpointAsync(_editingEndpoint.Id, _editingEndpoint, CancellationToken.None);
        }

        _editingEndpointId = -1;
        _editingEndpoint = new() { Id = -1 };
        await InvokeAsync(StateHasChanged);
    }


    private async Task AddEndpoint()
    {
        // TXWTODO: Where to actually validate before submiit?

        if (null == _newEndpoint.Storage || string.IsNullOrWhiteSpace(_newEndpoint.Name))
        {
            return;
        }
        
        await HigginsServiceClient.CreateEndpointAsync(_newEndpoint, CancellationToken.None);
        _listEndpoints = new List<Hannibal.Models.Endpoint>(
            await HigginsServiceClient.GetEndpointsAsync(CancellationToken.None)
        );
        await InvokeAsync(StateHasChanged);      
    }
}