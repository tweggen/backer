@page "/backer"
@using System.Net
@using Hannibal.Client
@using Hannibal.Models
@using Higgins.Client
@inject IHannibalServiceClient HannibalServiceClient
@inject IHigginsServiceClient HigginsServiceClient

@implements IDisposable

@rendermode InteractiveServer

<h3>Backer</h3>

@if (listJobs == null)
{
    <p><em>Loading jobs...</em></p>
}
else if (!listJobs.Any())
{
    <p>No jobs found.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>State</th>
            <th>SourceEndpoint</th>
            <th>DestinationEndpoint</th>
            <th>StartFrom</th>
            <th>Endby</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var job in listJobs)
        {
            <tr>
                <td>@job.Id</td>
                <td>@job.State</td>
                <td>@job.SourceEndpoint</td>
                <td>@job.DestinationEndpoint</td>
                <td>@job.StartFrom</td>
                <td>@job.EndBy</td>
            </tr>
        }
        </tbody>
    </table>
}

@if (listEndpoints == null)
{
<p><em>Loading endpoints...</em></p>
}
else if (!listEndpoints.Any())
{
<p>No endpoints found.</p>
}
else
{
<table class="table">
    <thead>
    <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Storage</th>
        <th>Path</th>
        <th>Comment</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var ep in listEndpoints)
    {
    <tr>
        <td>@ep.Id</td>
        <td>@ep.Name</td>
        <td>@ep.Storage.Technology</td>
        <td>@ep.Path</td>
        <td>@ep.Comment</td>
    </tr>
    }
    </tbody>
</table>
}

@code {
    private List<Job> listJobs;
    private List<Higgins.Models.Endpoint> listEndpoints;

    protected override async Task OnInitializedAsync()
    {
        listJobs = new List<Job>(
            await HannibalServiceClient.GetJobsAsync(
                new ResultPage() { Offset = 0, Length = 20},
                new JobFilter() { MaxState = Job.JobState.DoneSuccess, MinState = Job.JobState.Preparing}
            ));
        listEndpoints = new List<Higgins.Models.Endpoint>(
            await HigginsServiceClient.GetEndpointsAsync()
            );
    }

    public void Dispose()
    {
        // Dispose logic if needed
    }
}
